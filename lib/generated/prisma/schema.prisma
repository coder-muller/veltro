generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String
  email      String  @unique
  password   String
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Wallet Wallet[]
  Stock  Stock[]
  Bond   Bond[]
}

model Wallet {
  id   String @id @default(uuid())
  name String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Stock Stock[]
  Bond  Bond[]
}

model Stock {
  id String @id @default(uuid())

  name      String
  ticker    String
  type      String
  buyPrice  Float
  quantity  Float
  price     Float
  buyDate   DateTime
  sellDate  DateTime?
  sellPrice Float?

  dividends Dividend[]

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dividend {
  id String @id @default(uuid())

  amount      Float
  date        DateTime
  description String

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bond {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  name           String
  type           String
  buyDate        DateTime
  expirationDate DateTime?
  description    String?

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  CORRECTION
  INVESTMENT
  LIQUIDATION
  RESCUE
}

model Transaction {
  id String @id @default(uuid())

  bondId String
  bond   Bond   @relation(fields: [bondId], references: [id], onDelete: Cascade)

  date             DateTime
  type             TransactionType
  currentValue     Float
  transactionValue Float
  description      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
